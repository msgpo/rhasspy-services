#!/usr/bin/env bash
set -e

# -----------------------------------------------------------------------------
# Default Settings
# -----------------------------------------------------------------------------

http_host='0.0.0.0'
http_port='5000'

acoustic_model=''
language_model=''
dictioary=''

# -----------------------------------------------------------------------------
# Profile
# -----------------------------------------------------------------------------

if [[ "$1" == "--profile" ]]; then
    profile_dir="$2"
    profile_yml="${profile_dir}/profile.yml"
    shift 2

    var_file="$(mktemp)"
    function finish {
        rm -f "${var_file}"
    }

    trap finish EXIT

    export profile_dir
    yq "${profile_yml}" \
       -q http_host http.host "${http_host}" \
       -q http_port http.port "${http_port}" \
       -q acoustic_model speech-to-text.pocketsphinx.acoustic-model "${acoustic_model}" \
       -q language_model speech-to-text.pocketsphinx.language-model "${language_model}" \
       -q dictionary speech-to-text.pocketsphinx.dictionary "${dictionary}" \
       > "${var_file}"

    source "${var_file}"
fi

# -----------------------------------------------------------------------------

args=("$@")

if [[ ! -z "${acoustic_model}" ]]; then
    args+=('--acoustic-model' "${acoustic_model}")
fi

if [[ ! -z "${language_model}" ]]; then
    args+=('--language-model' "${language_model}")
fi

if [[ ! -z "${dictionary}" ]]; then
    args+=('--dictionary' "${dictionary}")
fi

# -----------------------------------------------------------------------------
# Temp Files and FIFOs
# -----------------------------------------------------------------------------

events_fifo="$(mktemp -u)"
audio_file="$(mktemp)"

function finish {
    rm -f "${audio_fifo}" "${events_fifo}"
}

trap finish EXIT
mkfifo "${events_fifo}"

# -----------------------------------------------------------------------------

python /main.py "${args[@]}" \
       --audio-file "${audio_file}" \
       --chunk-size 0 \
       --events-file "${events_fifo}" \
       --event-start 'start-listening' \
       --event-stop 'stop-listening' | \
python /http_server.py --host "${http_host}" --port "${http_port}" \
       --audio-file "${audio_file}" \
       --events-file "${events_fifo}" --debug
