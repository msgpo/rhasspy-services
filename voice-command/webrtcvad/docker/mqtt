#!/usr/bin/env bash

# -----------------------------------------------------------------------------
# Command-line Arguments
# -----------------------------------------------------------------------------

. "/shflags"

DEFINE_string 'profile' '' 'Path to profile directory' 'p'

DEFINE_string 'mqtt-host' '127.0.0.1' 'MQTT server address'
DEFINE_integer 'mqtt-port' 1883 'MQTT server port'

DEFINE_string 'audio-host' '0.0.0.0' 'Host for UDP audio input stream'
DEFINE_integer 'audio-port' 5000 'Port for UDP audio input stream'

DEFINE_string 'start-listening' 'rhasspy/voice-command/start-listening' 'Topic to start listening to audio stream'
DEFINE_string 'speech' 'rhasspy/voice-command/speech' 'Topic for when speech is detected'
DEFINE_string 'silence' 'rhasspy/voice-command/silence' 'Topic for when silence is detected'
DEFINE_string 'command-started' 'rhasspy/voice-command/command-started' 'Topic for when voice command starts'
DEFINE_string 'command-stopped' 'rhasspy/voice-command/command-stopped' 'Topic for when voice command stops'
DEFINE_string 'command-timeout' 'rhasspy/voice-command/command-timeout' 'Topic for when voice command times out'

FLAGS "$@" || exit $?
eval set -- "${FLAGS_ARGV}"

# -----------------------------------------------------------------------------
# Default Settings
# -----------------------------------------------------------------------------

set -e

profile_dir="${FLAGS_profile}"

mqtt_host="${FLAGS_mqtt_host}"
mqtt_port="${FLAGS_mqtt_port}"

audio_host="${FLAGS_audio_host}"
audio_port="${FLAGS_audio_port}"

start_listening="${FLAGS_start_listening}"
speech="${FLAGS_speech}"
silence="${FLAGS_silence}"
command_started="${FLAGS_command_started}"
command_stopped="${FLAGS_command_stopped}"
command_timeout="${FLAGS_command_timeout}"

# -----------------------------------------------------------------------------
# Profile
# -----------------------------------------------------------------------------

if [[ ! -z "${profile_dir}" ]]; then
    profile_yml="${profile_dir}/profile.yml"

    var_file="$(mktemp)"
    export profile_dir

    yq "${profile_yml}" \
       -q mqtt_host 'mqtt.host' "${mqtt_host}" \
       -q mqtt_port 'mqtt.port' "${mqtt_port}" \
       -q audio_host 'voice-command.audio-input.host' "${audio_host}" \
       -q audio_port 'voice-command.audio-input.port' "${audio_port}" \
       -q start_listening 'voice-command.mqtt-events.start-listening' "${start_listening}" \
       -q speech 'voice-command.mqtt-events.speech' "${speech}" \
       -q silence 'voice-command.mqtt-events.silence' "${silence}" \
       -q command_started 'voice-command.mqtt-events.command-started' "${command_started}" \
       -q command_stopped 'voice-command.mqtt-events.command-stopped' "${command_stopped}" \
       -q command_timeout 'voice-command.mqtt-events.command-timeout' "${command_timeout}" \
       > "${var_file}"

    source "${var_file}"
fi

# -----------------------------------------------------------------------------

echo "Expecting UDP audio stream at ${audio_host}:${audio_port}"

nc -ukl "${audio_host}" "${audio_port}" | \
    python /main.py "$@" \
           --events-file <(mosquitto_sub -h "${mqtt_host}" -p "${mqtt_port}" -v -t "${start_listening}") \
           --event-start "${start_listening}" \
           --event-command-start "${command_started}" \
           --event-command-stop "${command_stopped}" \
           --event-command-timeout "${command_timeout}" \
           --event-speech "${speech}" \
           --event-silence "${silence}" | \
    while read -r topic payload;
    do
        mosquitto_pub -h "${mqtt_host}" -p "${mqtt_port}" -t "${topic}" -m "${payload}"
    done
