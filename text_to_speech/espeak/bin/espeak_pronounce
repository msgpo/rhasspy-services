#!/usr/bin/env python3
import re
import sys
import argparse
import logging
import subprocess
import time
import tempfile

logger = logging.getLogger("espeak_pronounce")


def main():
    parser = argparse.ArgumentParser("espeak_pronounce")
    parser.add_argument(
        "--phoneme-map", "-m", required=True, help="Path to espeak phoneme map file"
    )
    parser.add_argument("--dictionary", "-d", help="Path to pronunciation dictionary")
    parser.add_argument(
        "--g2p-model", help="Use g2p model to guess word pronunciations"
    )
    parser.add_argument(
        "--pause",
        type=float,
        default=0.25,
        help="Number of seconds to pause between words",
    )
    parser.add_argument("--skip", type=int, default=0, help="Skip n words")
    parser.add_argument(
        "--espeak-word", action="store_true", help="Prononuce word with espeak too"
    )
    parser.add_argument(
        "--debug", action="store_true", help="Print DEBUG messages to the console"
    )
    args, rest_args = parser.parse_known_args()

    if args.debug:
        logging.basicConfig(level=logging.DEBUG)

    logger.debug(args)

    if (args.dictionary is None) and (args.g2p_model is None):
        logger.fatal("Either --dictionary or --g2p-model is required")
        sys.exit(1)

    all_arpas = set()
    word_to_arpa = {}
    has_dictionary = args.dictionary is not None

    if has_dictionary:
        # Load dictionary
        with open(args.dictionary, "r") as dict_file:
            for line in dict_file:
                line = line.strip()
                if len(line) == 0:
                    continue

                # Use explicit whitespace (avoid 0xA0)
                word, arpas = re.split(r"[ \t]+", line, maxsplit=1)
                if "(" in word:
                    continue

                word_to_arpa[word] = re.split(r"\s+", arpas)
                all_arpas.update(word_to_arpa[word])

    # Load espeak map
    arpa_to_espeak = {}
    with open(args.phoneme_map, "r") as map_file:
        for line in map_file:
            line = line.strip()
            if len(line) == 0:
                continue

            arpa, espeak = re.split(r"\s+", line)
            arpa_to_espeak[arpa] = espeak

            if has_dictionary:
                assert arpa in all_arpas, f"Missing {arpa} from espeak map"

    for word in sys.stdin:
        word = word.strip()
        if len(word) == 0:
            continue

        if args.skip > 0:
            args.skip -= 1
            logger.debug(f"Skipping {word}")
            continue

        if args.espeak_word:
            # Speak with espeak alone
            espeak_cmd = (
                ["espeak-ng", "-s", "80", "-x", "-q", "--sep= "] + rest_args + [word]
            )
            logger.debug(espeak_cmd)
            espeaks = subprocess.check_output(espeak_cmd).decode().strip()
            print(word, espeaks)

            espeak_cmd = ["espeak-ng", "-s", "80"] + rest_args + [word]
            logger.debug(espeak_cmd)

            subprocess.check_call(espeak_cmd)
            time.sleep(args.pause)

        if has_dictionary:
            # Look up
            arpas = word_to_arpa.get(word, [])
        else:
            # Guess
            with tempfile.NamedTemporaryFile(suffix=".txt", mode="w") as word_file:
                print(word, file=word_file)
                word_file.seek(0)

                phonetisaurus_cmd = [
                    "phonetisaurus-apply",
                    "--model",
                    args.g2p_model,
                    "--word_list",
                    word_file.name,
                    "--nbest",
                    "1",
                ]

                logging.debug(phonetisaurus_cmd)
                phonetisaurus_output = (
                    subprocess.check_output(phonetisaurus_cmd).decode().strip()
                )

                arpas = re.split(r"\s+", phonetisaurus_output)[1:]

        # Use phoneme map
        espeaks = [arpa_to_espeak.get(a, "") for a in arpas]
        espeak_str = "".join(espeaks)
        logger.debug(espeak_str)

        espeak_cmd = ["espeak-ng", "-s", "80"] + rest_args + [f"[[{espeak_str}]]"]
        logger.debug(espeak_cmd)

        print(word, " ".join(f"{a}/{e}" for a, e in zip(arpas, espeaks)))
        subprocess.check_call(espeak_cmd)
        time.sleep(args.pause)


# -----------------------------------------------------------------------------

if __name__ == "__main__":
    main()
