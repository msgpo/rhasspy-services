#!/usr/bin/env python3
import re
import sys
import argparse
import logging
import subprocess
import time

logger = logging.getLogger("espeak_pronounce")


def main():
    parser = argparse.ArgumentParser("espeak_pronounce")
    parser.add_argument(
        "--dictionary", "-d", required=True, help="Path to pronunciation dictionary"
    )
    parser.add_argument(
        "--phoneme-map", "-m", required=True, help="Path to espeak phoneme map file"
    )
    parser.add_argument(
        "--pause",
        type=float,
        default=0.25,
        help="Number of seconds to pause between words",
    )
    parser.add_argument(
        "--espeak-word", action="store_true", help="Prononuce word with espeak too"
    )
    parser.add_argument(
        "--debug", action="store_true", help="Print DEBUG messages to the console"
    )
    args, rest_args = parser.parse_known_args()

    if args.debug:
        logging.basicConfig(level=logging.DEBUG)

    logger.debug(args)

    # Load dictionary
    word_to_arpa = {}
    with open(args.dictionary, "r") as dict_file:
        for line in dict_file:
            line = line.strip()
            if len(line) == 0:
                continue

            # Use explicit whitespace (avoid 0xA0)
            word, arpas = re.split(r"[ \t]+", line, maxsplit=1)
            if "(" in word:
                continue

            word_to_arpa[word] = re.split(r"\s+", arpas)

    # Load espeak map
    arpa_to_espeak = {}
    with open(args.phoneme_map, "r") as map_file:
        for line in map_file:
            line = line.strip()
            if len(line) == 0:
                continue

            arpa, espeak = re.split(r"\s+", line)
            arpa_to_espeak[arpa] = espeak

    for word in sys.stdin:
        word = word.strip()
        if len(word) == 0:
            continue

        if args.espeak_word:
            # Speak with espeak alone
            espeak_cmd = ["espeak", "-s", "80"] + rest_args + [word]
            logger.debug(espeak_cmd)

            print(word)
            subprocess.check_call(espeak_cmd)
            time.sleep(args.pause)

        # Use phoneme map
        arpas = word_to_arpa.get(word, [])
        espeaks = [arpa_to_espeak.get(a, "") for a in arpas]
        espeak_str = "".join(espeaks)
        logger.debug(espeak_str)

        espeak_cmd = ["espeak", "-s", "80"] + rest_args + [f"[[{espeak_str}]]"]
        logger.debug(espeak_cmd)

        print(word, " ".join(arpas), espeak_str)
        subprocess.check_call(espeak_cmd)
        time.sleep(args.pause)


# -----------------------------------------------------------------------------

if __name__ == "__main__":
    main()
