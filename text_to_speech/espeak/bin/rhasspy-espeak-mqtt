#!/usr/bin/env bash

if [[ -z "${rhasspy_dir}" ]]; then
    export rhasspy_dir='/usr/lib/rhasspy'
fi

# -----------------------------------------------------------------------------
# Command-line Arguments
# -----------------------------------------------------------------------------

. "${rhasspy_dir}/etc/shflags"

DEFINE_string 'profile' '' 'Path to profile directory' 'p'

# MQTT
DEFINE_string 'mqtt-host' '127.0.0.1' 'MQTT server address'
DEFINE_integer 'mqtt-port' 1883 'MQTT server port'
DEFINE_string 'mqtt-topic' 'rhasspy/text-to-speech/#' 'MQTT topic to subscribe to'

# Cache
DEFINE_string 'base-uri' '' 'Base uri for play requests'
DEFINE_string 'cache-directory' '' 'Directory to cache WAV files'

# espeak
DEFINE_string 'voice' '' 'espeak voice'

FLAGS "$@" || exit $?
eval set -- "${FLAGS_ARGV}"

# -----------------------------------------------------------------------------
# Default Settings
# -----------------------------------------------------------------------------

set -e

profile_dir="${FLAGS_profile}"

mqtt_host="${FLAGS_mqtt_host}"
mqtt_port="${FLAGS_mqtt_port}"
mqtt_topic="${FLAGS_mqtt_topic}"

base_uri="${FLAGS_base_uri}"
cache_directory="${FLAGS_cache_directory}"

voice="${FLAGS_voice}"

# -----------------------------------------------------------------------------
# Profile
# -----------------------------------------------------------------------------

if [[ ! -z "${profile_dir}" ]]; then
    export profile_dir="$(realpath "${profile_dir}")"
    source <(rhasspy-yq "${profile_dir}/profile.yml" \
                        -q mqtt_host 'mqtt.host' "${mqtt_host}" \
                        -q mqtt_port 'mqtt.port' "${mqtt_port}" \
                        -q mqtt_topic 'mqtt.topic' "${mqtt_topic}" \
                        -q cache_directory 'text-to-speech.cache.cache-directory' "${cache_directory}" \
                        -q voice 'text-to-speech.espeak.voice' "${voice}" | \
                 tee /dev/stderr)

    if [[ -z "${cache_directory}" ]]; then
        # Default to profile directory for cache
        cache_directory="${profile_dir}/tts_cache"
    fi
fi

# -----------------------------------------------------------------------------

args=()

if [[ ! -z "${voice}" ]]; then
    args+=('-v' "${voice}")
fi

args+=("$@")

if [[ -z "${cache_directory}" ]]; then
    cache_directory="${profile_dir}/tts_cache"
fi

# Create cache dir
mkdir -p "${cache_directory}"

if [[ -z "${base_uri}" ]]; then
    # Assume file-based access to cache
    base_uri="file://${cache_directory}"
fi

# -----------------------------------------------------------------------------
# MQTT Events
# -----------------------------------------------------------------------------

event_prefix='rhasspy/text-to-speech'

# Input
event_say="${event_prefix}/say-text"

# Output
event_said="${event_prefix}/text-said"

# Other
event_play='rhasspy/audio-output/play-uri'

function send_event {
    topic="$1"
    payload="$2"
    if [[ -z "${payload}" ]]; then
        payload='{}'
    elif [[ "${payload}" == '-' ]]; then
        payload="$(cat)"
    fi

    mosquitto_pub -h "${mqtt_host}" -p "${mqtt_port}" -t "${topic}" -m "${payload}"
}

# -----------------------------------------------------------------------------

# Disable automatic exit on error
set +e

rhasspy-jsonl-sub -h "${mqtt_host}" -p "${mqtt_port}" -v -t "${mqtt_topic}" | \
    while read -r topic json;
    do
        # Split topic by /
        IFS='/'
        read -ra topic_parts <<< "${topic}"
        base_topic="${topic_parts[*]:0:3}"
        request_id="${topic_parts[*]:3}"

        # Need to restore this
        IFS=' '

        if [[ ! -z "${request_id}" ]]; then
            request_id="/${request_id}"
        fi

        if [[ "${base_topic}" == "${event_say}" ]]; then
            text="$(echo -n "${json}" | jq '.text')"
            if [[ ! -z "${text}" ]]; then
                echo "${text}"

                # Cache WAV file
                filename="$(echo "${voice}-${text}" | md5sum | awk '{ print $1 }').wav"
                espeak-ng --stdout "${args[@]}" "${text}" \
                          > "${cache_directory}/${filename}"

                # Request playback
                jq -jc -n --arg uri "${base_uri}/${filename}" '{uri:$uri}' | \
                    send_event "${event_play}${request_id}" '-'
            fi

            # Report that text was said
            send_event "${event_said}${request_id}" "${json}"
        fi
    done
