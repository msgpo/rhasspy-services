#!/usr/bin/env bash
this_dir="$( cd "$( dirname "$0" )" && pwd )"

# -----------------------------------------------------------------------------
# Command-line Arguments
# -----------------------------------------------------------------------------

. "${this_dir}/etc/shflags"

DEFINE_string 'profile' '' 'Path to profile directory' 'p'

# MQTT
DEFINE_string 'mqtt-host' '127.0.0.1' 'MQTT server address'
DEFINE_integer 'mqtt-port' 1883 'MQTT server port'

# Events
DEFINE_string 'say-text' 'rhasspy/text-to-speech/say-text' 'Topic for text to speech request'
DEFINE_string 'play-uri' 'rhasspy/audio-output/play-uri' 'Topic for uri audio output'

# Cache
DEFINE_string 'base-uri' 'http://localhost:8000' 'Base uri for play requests'
DEFINE_string 'cache-directory' 'cache' 'Directory to cache WAV files'

# espeak
DEFINE_string 'voice' '' 'espeak voice'

FLAGS "$@" || exit $?
eval set -- "${FLAGS_ARGV}"

# -----------------------------------------------------------------------------
# Default Settings
# -----------------------------------------------------------------------------

set -e

profile_dir="${FLAGS_profile}"

mqtt_host="${FLAGS_mqtt_host}"
mqtt_port="${FLAGS_mqtt_port}"

say_text="${FLAGS_say_text}"
play_uri="${FLAGS_play_uri}"

base_uri="${FLAGS_base_uri}"
cache_directory="${FLAGS_cache_directory}"

voice="${FLAGS_voice}"

# -----------------------------------------------------------------------------
# Profile
# -----------------------------------------------------------------------------

if [[ ! -z "${profile_dir}" ]]; then
    export profile_dir

    # Load virtual environment
    venv="${this_dir}/.venv"
    if [[ -d "${venv}" ]]; then
        source "${venv}/bin/activate"
        export LD_LIBRARY_PATH="${venv}/lib:${LD_LIBRARY_PATH}"
    fi

    source <(python3 \
                 "${this_dir}/bin/yq" "${profile_dir}/profile.yml" \
                 -q mqtt_host 'mqtt.host' "${mqtt_host}" \
                 -q mqtt_port 'mqtt.port' "${mqtt_port}" \
                 -q say_text 'text-to-speech.mqtt-events.say-text' "${say_text}" \
                 -q voice 'text-to-speech.espeak.voice' "${voice}" \
                 -q play_uri 'audio-output.mqtt-events.play-uri' "${play_uri}" \
                 -q base_uri 'text-to-speech.cache.base-uri' "${base_uri}" \
                 -q cache_directory 'text-to-speech.cache.cache-directory' "${cache_directory}" \
                 -q voice 'text-to-speech.espeak.voice' "${voice}" | \
                 tee /dev/stderr)
fi

# -----------------------------------------------------------------------------

args=()

if [[ ! -z "${voice}" ]]; then
    args+=('-v' "${voice}")
fi

args+=("$@")

# Create cache dir
mkdir -p "${cache_directory}"

# -----------------------------------------------------------------------------

mosquitto_sub -h "${mqtt_host}" -p "${mqtt_port}" -t "${say_text}" | \
    "${this_dir}/bin/jql" -r '.text' | \
    while read -r line;
    do
        echo "${line}"
        filename="$(echo "${line}" | md5sum | awk '{ print $1 }').wav"

        # Cache WAV file
        espeak --stdout "${args[@]}" "${line}" > "${cache_directory}/${filename}"

        echo -n "${base_uri}/${filename}" | \
            mosquitto_pub -h "${mqtt_host}" -p "${mqtt_port}" -t "${play_uri}" -s
    done
