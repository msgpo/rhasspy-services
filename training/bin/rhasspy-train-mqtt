#!/usr/bin/env bash

# MQTT wrapper around rhasspy-train

if [[ -z "${rhasspy_dir}" ]]; then
    export rhasspy_dir='/usr/lib/rhasspy'
fi

# -----------------------------------------------------------------------------
# Command-line Arguments
# -----------------------------------------------------------------------------

. "${rhasspy_dir}/etc/shflags"

DEFINE_string 'profile' '' 'Path to profile directory' 'p'

# MQTT
DEFINE_string 'mqtt-host' '127.0.0.1' 'MQTT server address'
DEFINE_integer 'mqtt-port' 1883 'MQTT server port'

# Events
DEFINE_string 'start-training' 'rhasspy/training/start-training' 'Topic for re-training request'
DEFINE_string 'training-failed' 'rhasspy/training/training-failed' 'Topic for training failure response'
DEFINE_string 'training-complete' 'rhasspy/training/training-complete' 'Topic for training completion response'

FLAGS "$@" || exit $?
eval set -- "${FLAGS_ARGV}"

# -----------------------------------------------------------------------------
# Default Settings
# -----------------------------------------------------------------------------

set -e

profile_dir="${FLAGS_profile}"

mqtt_host="${FLAGS_mqtt_host}"
mqtt_port="${FLAGS_mqtt_port}"

if [[ "${FLAGS_debug}" -eq "${FLAGS_TRUE}" ]]; then
    debug='--debug'
fi

start_training="${FLAGS_start_training}"
training_failed="${FLAGS_training_failed}"
training_complete="${FLAGS_training_complete}"

# -----------------------------------------------------------------------------
# Profile
# -----------------------------------------------------------------------------

if [[ -z "${profile_dir}" ]]; then
    echo "Profile is required"
    exit 1
fi

export profile_dir="$(realpath "${profile_dir}")"
source <(rhasspy-yq "${profile_dir}/profile.yml" \
                    -q mqtt_host 'mqtt.host' "${mqtt_host}" \
                    -q mqtt_port 'mqtt.port' "${mqtt_port}" \
                    -q unknown 'training.unknown-words-file' "${profile_dir}/unknown.txt" \
                    -q guess 'training.guess-words-file' "${profile_dir}/guess_words.json" | \
             tee /dev/stderr)

# -----------------------------------------------------------------------------

error_file="$(mktemp)"
function finish {
    rm -f "${error_file}"
}

trap finish EXIT

# -----------------------------------------------------------------------------

# Disable automatic exiting on error
set +e

# Main loop
mosquitto_sub -v -t "${start_training}" | while read -r line;
do
    echo "Training started"
    (
        # Do actual training
        rhasspy-train \
            --profile "${profile_dir}" \
            2>&1 > "${error_file}" || exit 1

        # Check for unknown words
        if [[ ! -f "${unknown}" ]]; then
            # Success
            echo "Training complete"
            mosquitto_pub -t "${training_complete}" -m '{}'
        else
            # Handle unknown words
            echo "Unknown words:"
            cat "${unknown}"
            echo ''

            if [[ -f "${guess}" ]]; then
                # Report guessed pronunciations
                jq -jcn \
                   --argjson guess "$(cat "${guess}")" \
                   '{ "error": "unknown words", "unknown_words":$guess }' | \
                    mosquitto_pub -t "${training_failed}" -s
            else
                # Simply report unknown words
                error_message='unknown words'
                exit 1
            fi
        fi
    ) || (
        # Report general errors
        stat "${error_file}"
        error_message="$(cat "${error_file}")"
        jq -jcn --arg m "${error_message}" '{error:$m}' | \
            mosquitto_pub -t "${training_failed}" -s
    )
done
