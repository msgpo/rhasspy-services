#!/usr/bin/env bash

# MQTT wrapper around rhasspy-train

if [[ -z "${rhasspy_dir}" ]]; then
    export rhasspy_dir='/usr/lib/rhasspy'
fi

# -----------------------------------------------------------------------------
# Command-line Arguments
# -----------------------------------------------------------------------------

. "${rhasspy_dir}/etc/shflags"

DEFINE_string 'profile' '' 'Path to profile directory' 'p'

# MQTT
DEFINE_string 'mqtt-host' '127.0.0.1' 'MQTT server address'
DEFINE_integer 'mqtt-port' 1883 'MQTT server port'

# Events
DEFINE_string 'start-training' 'rhasspy/training/start-training' 'Topic for re-training request'
DEFINE_string 'training-failed' 'rhasspy/training/training-failed' 'Topic for training failure response'
DEFINE_string 'training-complete' 'rhasspy/training/training-complete' 'Topic for training completion response'

# training
DEFINE_boolean 'debug' false 'Print DEBUG messages to console'
DEFINE_string 'sentences-ini' '' 'Path to sentences.ini file'
DEFINE_string 'g2p-model' '' 'Path to OpenFST grapheme-to-phoneme model'
DEFINE_string 'intent-fst' '' 'Path to write intent finite state transducer'
DEFINE_string 'language-model' '' 'Path to write ARPA language model'
DEFINE_string 'dictionary' '' 'Path to write prune prounciation dictionary'
DEFINE_string 'base-dictionary' '' 'Path to base prounciation dictionary'
DEFINE_string 'grammar-dir' '' 'Path to write JSGF grammars'
DEFINE_string 'slots-dir' '' 'Directory with slot files'
DEFINE_string 'vocab' '' 'Path to sentence vocabulary'
DEFINE_string 'unknown' '' 'Path to write unknown words'
DEFINE_integer 'nbest' 5 'Number of pronunciation guesses for unknown words'
DEFINE_string 'kaldi-dir' "${kaldi_dir}" 'Path to kaldi top-level directory'
DEFINE_string 'model-type' '' 'Kaldi model type (gmm or nnet3)'
DEFINE_string 'model-dir' '' 'Kaldi model directory'

FLAGS "$@" || exit $?
eval set -- "${FLAGS_ARGV}"

# -----------------------------------------------------------------------------
# Default Settings
# -----------------------------------------------------------------------------

set -e

profile_dir="${FLAGS_profile}"

mqtt_host="${FLAGS_mqtt_host}"
mqtt_port="${FLAGS_mqtt_port}"

# General settings
sentences_ini="${FLAGS_sentences_ini}"
intent_fst="${FLAGS_intent_fst}"
g2p_model="${FLAGS_g2p_model}"
language_model="${FLAGS_language_model}"
base_dictionary="${FLAGS_base_dictionary}"
dictionary="${FLAGS_dictionary}"
grammar_dir="${FLAGS_grammar_dir}"
slots_dir="${FLAGS_slots_dir}"
vocab="${FLAGS_vocab}"
unknown="${FLAGS_unknown}"
nbest="${FLAGS_nbest}"

# Kaldi settings
model_type="${FLAGS_model_type}"
model_dir="${FLAGS_model_dir}"

if [[ "${FLAGS_debug}" -eq "${FLAGS_TRUE}" ]]; then
    debug='--debug'
fi

start_training="${FLAGS_start_training}"
training_failed="${FLAGS_training_failed}"
training_complete="${FLAGS_training_complete}"

# -----------------------------------------------------------------------------
# Profile
# -----------------------------------------------------------------------------

if [[ ! -z "${profile_dir}" ]]; then
    profile_dir="$(realpath "${profile_dir}")"
    export profile_dir

    source <(rhasspy-yq "${profile_dir}/profile.yml" \
                        -q mqtt_host 'mqtt.host' "${mqtt_host}" \
                        -q mqtt_port 'mqtt.port' "${mqtt_port}" \
                        -q sentences_ini 'training.sentences-file' "${sentences_ini}" \
                        -q g2p_model 'training.grapheme-to-phoneme-model' "${g2p_model}" \
                        -q intent_fst 'training.intent-fst' "${intent_fst}" \
                        -q language_model 'training.language-model' "${language_model}" \
                        -q dictionary 'training.dictionary' "${dictionary}" \
                        -q base_dictionary 'training.base-dictionary' "${base_dictionary}" \
                        -q grammar_dir 'training.grammar-directory' "${grammar_dir}" \
                        -q slots_dir 'training.slots-directory' "${slots_dir}" \
                        -q vocab 'training.vocabulary-file' "${vocab}" \
                        -q unknown 'training.unknown-words-file' "${unknown}" \
                        -q model_type 'training.kaldi.model-type' "${model_type}" \
                        -q model_dir 'training.kaldi.model-directory' "${model_dir}" \
                        -q start_training 'training.mqtt-events.start-training' "${start_training}" \
                        -q training_failed 'training.mqtt-events.training-failed' "${training_failed}" \
                        -q training_complete 'training.mqtt-events.training-complete' "${training_complete}" | \
                 tee /dev/stderr)
fi

# -----------------------------------------------------------------------------

# Temporary directory
temp_dir="$(mktemp -d)"
function finish {
    rm -rf "${temp_dir}"
}

trap finish EXIT

# -----------------------------------------------------------------------------
# Required Settings
# -----------------------------------------------------------------------------

if [[ -z "${sentences_ini}" ]]; then
    echo "Sentences ini file is required"
    exit 1
fi

if [[ -z "${intent_fst}" ]]; then
    echo "Intent FST path is required"
    exit 1
fi

# -----------------------------------------------------------------------------

if [[ -z "${grammar_dir}" ]]; then
    grammar_dir="${temp_dir}/grammars"
fi

if [[ -z "${vocab}" ]]; then
    vocab="${temp_dir}/vocab.txt"
fi

if [[ -z "${unknown}" ]]; then
    unknown="${temp_dir}/unknown.txt"
fi

jsgf_fst_args=()
if [[ ! -z "${slots_dir}" ]]; then
    jsgf_fst_args=('--slots-dir' "${slots_dir}")
fi

# -----------------------------------------------------------------------------

# Disable automatic exiting on error
set +e

failed_message='{}'
error_file="${temp_dir}/error.log"

# Main loop
mosquitto_sub -v -t "${start_training}" | while read -r line;
do
    echo "Training started"

    (
        # ini -> jsgf
        rhasspy-ini_jsgf \
            --grammar-dir "${grammar_dir}" \
            < "${sentences_ini}" \
            2> "${error_file}" || exit 1

        # jsgf -> fst, arpa
        rhasspy-jsgf_fst_arpa \
            --grammar-dir "${grammar_dir}" \
            --fst "${intent_fst}" \
            --arpa "${language_model}" \
            --vocab "${vocab}" \
            "${jsgf_fst_args[@]}" \
            2> "${error_file}" || exit 1

        # vocab -> dict
        rm -f "${unknown}"
        rhasspy-vocab_dict \
            --vocab "${vocab}" \
            --dictionary "${base_dictionary}" \
            --unknown "${unknown}" \
            > "${dictionary}" \
            2> "${error_file}" || exit 1

        # Check for unknown words
        if [[ ! -f "${unknown}" ]]; then

            # Check if Kaldi model training is required
            if [[ ! -z "${model_type}" ]]; then
                echo "Training kaldi model"
                rhasspy-kaldi-train \
                    --kaldi-dir "${kaldi_dir}" \
                    --model-type "${model_type}" \
                    --model-dir "${model_dir}" \
                    --dictionary "${dictionary}" \
                    --language-model "${language_model}" \
                    2>&1 > "${error_file}" || exit 1
            fi

            # Success
            echo "Training complete"
            mosquitto_pub -t "${training_complete}" -m '{}'
        else
            # Handle unknown words
            echo "Unknown words:" | tee "${error_file}"
            cat "${unknown}" | tee -a "${error_file}"
            echo ''

            if [[ ! -z "${g2p_model}" ]]; then
                # Use grapheme-to-phoneme model to guess pronunciations
                guess="${temp_dir}/guess.json"

                # Guess unknown words
                echo "Guessing unknown word pronunciations with ${g2p_model}"

                echo '{ "error": "unknown words", "unknown_words": [' > "${guess}"
                rhasspy-vocab_g2p \
                    --model "${g2p_model}" \
                    --nbest "${nbest}" \
                    < "${unknown}" >> "${guess}"
                echo ']}' >> "${guess}" \
                     2> "${error_file}"

                failed_message="$(jq -jc . < "${guess}")"
                echo 'Done guessing'

                mosquitto_pub -t "${training_failed}" -m "${failed_message}"
            else
                # Simply report unknown words
                exit 1
            fi
        fi
    ) || (
        # Report general errors
        error_message="$(cat "${error_file}")"
        echo "${error_message}"

        failed_message="$(jq -n --arg m "${error_message}" '{error:$m}' | jsonl)"
        mosquitto_pub -t "${training_failed}" -m "${failed_message}"
    )
done
