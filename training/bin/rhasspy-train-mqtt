#!/usr/bin/env bash

# MQTT wrapper around rhasspy-train

if [[ -z "${rhasspy_dir}" ]]; then
    export rhasspy_dir='/usr/lib/rhasspy'
fi

# -----------------------------------------------------------------------------
# Command-line Arguments
# -----------------------------------------------------------------------------

. "${rhasspy_dir}/etc/shflags"

DEFINE_string 'profile' '' 'Path to profile directory' 'p'

# MQTT
DEFINE_string 'mqtt-host' '127.0.0.1' 'MQTT server address'
DEFINE_integer 'mqtt-port' 1883 'MQTT server port'
DEFINE_string 'mqtt-topic' 'rhasspy/training/#' 'MQTT topic to subscribe to'

# Training
DEFINE_boolean 'fail-unknown' 'Training fails if there are unknown words'

FLAGS "$@" || exit $?
eval set -- "${FLAGS_ARGV}"

# -----------------------------------------------------------------------------
# Default Settings
# -----------------------------------------------------------------------------

set -e

profile_dir="${FLAGS_profile}"

mqtt_host="${FLAGS_mqtt_host}"
mqtt_port="${FLAGS_mqtt_port}"
mqtt_topic="${FLAGS_mqtt_topic}"

if [[ "${FLAGS_debug}" -eq "${FLAGS_TRUE}" ]]; then
    debug='--debug'
fi

if [[ "${FLAGS_fail_unknown}" -eq "${FLAGS_TRUE}" ]]; then
    fail_unknown='true'
fi

# -----------------------------------------------------------------------------
# Profile
# -----------------------------------------------------------------------------

if [[ -z "${profile_dir}" ]]; then
    echo "Profile is required"
    exit 1
fi

export profile_dir="$(realpath "${profile_dir}")"
source <(rhasspy-yq "${profile_dir}/profile.yml" \
                    -q mqtt_host 'mqtt.host' "${mqtt_host}" \
                    -q mqtt_port 'mqtt.port' "${mqtt_port}" \
                    -q mqtt_topic 'mqtt.topic' "${mqtt_topic}" \
                    -q custom_words 'training.custom-words-file' "${profile_dir}/custom_words.txt" \
                    -q unknown 'training.unknown-words-file' "${profile_dir}/unknown.txt" \
                    -q guess 'training.guess-words-file' "${profile_dir}/guess_words.json" | \
             tee /dev/stderr)

# -----------------------------------------------------------------------------

error_file="$(mktemp)"
function finish {
    rm -f "${error_file}"
}

trap finish EXIT

# -----------------------------------------------------------------------------
# MQTT Events
# -----------------------------------------------------------------------------

event_prefix='rhasspy/training'

# Input
event_start="${event_prefix}/start-training"

# Output
event_error="${event_prefix}/error"
event_started="${event_prefix}/training-started"
event_completed="${event_prefix}/training-completed"

function send_event {
    topic="$1"
    payload="$2"
    if [[ -z "${payload}" ]]; then
        payload='{}'
    elif [[ "${payload}" == '-' ]]; then
        payload="$(cat)"
    fi

    mosquitto_pub -h "${mqtt_host}" -p "${mqtt_port}" -t "${topic}" -m "${payload}"
}

# -----------------------------------------------------------------------------

# Disable automatic exiting on error
set +e

# Main loop
rhasspy-jsonl-sub -v -t "${mqtt_topic}" | \
    while read -r topic payload;
    do
        # Split topic by /
        IFS='/'
        read -ra topic_parts <<< "${topic}"
        base_topic="${topic_parts[*]:0:3}"
        request_id="${topic_parts[*]:3}"

        # Need to restore this
        IFS=' '

        if [[ ! -z "${request_id}" ]]; then
            request_id="/${request_id}"
        fi

        if [[ "${base_topic}" == "${event_start}" ]]; then
            echo "Training started (request_id=${request_id})"
            (
                send_event "${event_started}${request_id}"

                # Do actual training
                (rhasspy-train \
                     --profile "${profile_dir}" \
                     2>&1 | \
                     tee /dev/stderr \
                         > "${error_file}") || exit 1

                # Check for unknown words
                if [[ ! -f "${unknown}" ]]; then
                    # Success
                    echo "Training complete"
                    send_event "${event_completed}${request_id}"
                else
                    # Handle unknown words
                    echo "Unknown words:"
                    cat "${unknown}"
                    echo ''

                    if [[ -f "${guess}" ]]; then
                        if [[ -z "${fail_unknown}" ]]; then
                            # Report guessed pronunciations
                            jq -jcn \
                               --argjson guess "$(cat "${guess}")" \
                               '{ "error": "unknown words", "unknown_words":$guess }' | \
                                send_event "${event_error}${request_id}" '-'
                        else
                            # Use first guess and re-train
                            touch "${custom_words}"
                            jq -r 'keys[]' < "${guess}" | \
                                while read -r word;
                                do
                                    first_guess="$(jq -r --arg w "${word}" '.[$w][0]' < "${guess}")"
                                    echo "${word}" "${first_guess}" >> "${custom_words}"
                                done

                            # Re-train with new words
                            (rhasspy-train \
                                 --profile "${profile_dir}" \
                                 2>&1 | \
                                 tee /dev/stderr \
                                     > "${error_file}") || exit 1
                        fi
                    else
                        # No guesses. Simply report that there were unknown words.
                        error_message='unknown words'
                        exit 1
                    fi
                fi
            ) || (
                # Report general errors
                error_message="$(cat "${error_file}")"
                jq -jcn --arg m "${error_message}" '{error:$m}' | \
                    send_event "${event_error}${request_id}" '-'
            )
        fi
    done
