#!/usr/bin/env bash

# -----------------------------------------------------------------------------
# Command-line Arguments
# -----------------------------------------------------------------------------

if [[ -z "${shflags}" ]]; then
    echo "Missing shflags"
    exit 1
fi

. "${shflags}"

DEFINE_string 'profile' '' 'Path to profile directory' 'p'

# training
DEFINE_boolean 'debug' false 'Print DEBUG messages to console'
DEFINE_string 'sentences-ini' '' 'Path to sentences.ini file'
DEFINE_string 'g2p-model' '' 'Path to OpenFST grapheme-to-phoneme model'
DEFINE_string 'intent-fst' '' 'Path to write intent finite state transducer'
DEFINE_string 'language-model' '' 'Path to write ARPA language model'
DEFINE_string 'dictionary' '' 'Path to write prune prounciation dictionary'
DEFINE_string 'base-dictionary' '' 'Path to base prounciation dictionary'
DEFINE_string 'grammar-dir' '' 'Path to write JSGF grammars'
DEFINE_string 'vocab' '' 'Path to sentence vocabulary'
DEFINE_string 'unknown' '' 'Path to write unknown words'
DEFINE_integer 'nbest' 5 'Number of pronunciation guesses for unknown words'
DEFINE_string 'kaldi-dir' "${kaldi_dir}" 'Path to kaldi top-level directory'
DEFINE_string 'model-type' '' 'Kaldi model type (gmm or nnet3)'
DEFINE_string 'model-dir' '' 'Kaldi model directory'

FLAGS "$@" || exit $?
eval set -- "${FLAGS_ARGV}"

# -----------------------------------------------------------------------------
# Default Settings
# -----------------------------------------------------------------------------

set -e

profile_dir="${FLAGS_profile}"

# General settings
sentences_ini="${FLAGS_sentences_ini}"
intent_fst="${FLAGS_intent_fst}"
g2p_model="${FLAGS_g2p_model}"
language_model="${FLAGS_language_model}"
base_dictionary="${FLAGS_base_dictionary}"
dictionary="${FLAGS_dictionary}"
grammar_dir="${FLAGS_grammar_dir}"
vocab="${FLAGS_vocab}"
unknown="${FLAGS_unknown}"
nbest="${FLAGS_nbest}"

# Kaldi settings
model_type="${FLAGS_model_type}"
model_dir="${FLAGS_model_dir}"

if [[ "${FLAGS_debug}" -eq "${FLAGS_TRUE}" ]]; then
    debug='--debug'
fi

# -----------------------------------------------------------------------------
# Profile
# -----------------------------------------------------------------------------

if [[ ! -z "${profile_dir}" ]]; then
    profile_dir="$(realpath "${profile_dir}")"
    export profile_dir

    source <(yq "${profile_dir}/profile.yml" \
                -q sentences_ini 'training.sentences-file' "${sentences_ini}" \
                -q g2p_model 'training.grapheme-to-phoneme-model' "${g2p_model}" \
                -q intent_fst 'training.intent-fst' "${intent_fst}" \
                -q language_model 'training.language-model' "${language_model}" \
                -q dictionary 'training.dictionary' "${dictionary}" \
                -q base_dictionary 'training.base-dictionary' "${base_dictionary}" \
                -q grammar_dir 'training.grammar-directory' "${grammar_dir}" \
                -q vocab 'training.vocabulary-file' "${vocab}" \
                -q unknown 'training.unknown-words-file' "${unknown}" \
                -q model_type 'training.kaldi.model-type' "${model_type}" \
                -q model_dir 'training.kaldi.model-directory' "${model_dir}" | \
                 tee /dev/stderr)
fi

# -----------------------------------------------------------------------------

# Temporary directory
temp_dir="$(mktemp -d)"
function finish {
    rm -rf "${temp_dir}"
}

trap finish EXIT

# -----------------------------------------------------------------------------
# Required Settings
# -----------------------------------------------------------------------------

if [[ -z "${sentences_ini}" ]]; then
    echo "Sentences ini file is required"
    exit 1
fi

if [[ -z "${intent_fst}" ]]; then
    echo "Intent FST path is required"
    exit 1
fi

# -----------------------------------------------------------------------------

if [[ -z "${grammar_dir}" ]]; then
    grammar_dir="${temp_dir}/grammars"
fi

if [[ -z "${vocab}" ]]; then
    vocab="${temp_dir}/vocab.txt"
fi

if [[ -z "${unknown}" ]]; then
    unknown="${temp_dir}/unknown.txt"
fi

# -----------------------------------------------------------------------------

# ini -> jsgf
ini_jsgf \
    --grammar-dir "${grammar_dir}" \
    < "${sentences_ini}"

# jsgf -> fst, arpa
jsgf_fst_arpa \
    --grammar-dir "${grammar_dir}" \
    --fst "${intent_fst}" \
    --arpa "${language_model}" \
    --vocab "${vocab}"

# vocab -> dict
rm -f "${unknown}"
vocab_dict \
    --vocab "${vocab}" \
    --dictionary "${base_dictionary}" \
    --unknown "${unknown}" \
    > "${dictionary}"

# Check for unknown words
if [[ ! -f "${unknown}" ]]; then

    # Check if Kaldi model training is required
    if [[ ! -z "${model_type}" ]]; then
        echo "Training kaldi model"
        kaldi-train \
            --kaldi-dir "${kaldi_dir}" \
            --model-type "${model_type}" \
            --model-dir "${model_dir}" \
            --dictionary "${dictionary}" \
            --language-model "${language_model}"
    fi

    # Success
    echo "Training complete"
else
    # Handle unknown words
    echo "Unknown words:"
    cat "${unknown}"
    echo ''

    if [[ ! -z "${g2p_model}" ]]; then
        # Use grapheme-to-phoneme model to guess pronunciations
        guess="${temp_dir}/guess.json"

        # Guess unknown words
        echo "Guessing unknown word pronunciations with ${g2p_model}"

        vocab_g2p \
            --model "${g2p_model}" \
            --nbest "${nbest}" \
            < "${unknown}"

        echo 'Done guessing'
    fi
fi
