#!/usr/bin/env bash

# -----------------------------------------------------------------------------
# Command-line Arguments
# -----------------------------------------------------------------------------

if [[ -z "${shflags}" ]]; then
    echo "Missing shflags"
    exit 1
fi

. "${shflags}"

# kaldi
DEFINE_string 'kaldi-dir' "${kaldi_dir}" 'Path to kaldi top-level directory'
DEFINE_string 'model-type' '' 'Type of kaldi model (gmm or nnet3)'
DEFINE_string 'model-dir' '' 'Directory with kaldi model'
DEFINE_string 'dictionary' '' 'Path to pronunciation dictionary'
DEFINE_string 'language-model' '' 'Path to ARPA language model'

FLAGS "$@" || exit $?
eval set -- "${FLAGS_ARGV}"

# -----------------------------------------------------------------------------
# Default Settings
# -----------------------------------------------------------------------------

set -e

kaldi_dir="${FLAGS_kaldi_dir}"

if [[ ! -d "${kaldi_dir}" ]]; then
    echo "Kaldi does not exist at ${kaldi_dir}"
    exit 1
fi

model_type="${FLAGS_model_type}"

if [[ -z "${model_type}" ]]; then
    echo "Model type is required"
    exit 1
fi

model_dir="${FLAGS_model_dir}"

if [[ -z "${model_dir}" ]]; then
    echo "Model directory is required"
    exit 1
fi

if [[ ! -d "${model_dir}" ]]; then
    echo "Model directory does not exist at ${model_dir}"
    exit 1
fi

dict_file="${FLAGS_dictionary}"
lm_file="${FLAGS_language_model}"

if [[ -z "${dict_file}" || -z "${lm_file}" ]]; then
    echo "Dictionary and language model are required"
    exit 1
fi

# -----------------------------------------------------------------------------

# Need to make all paths absolute
kaldi_dir="$(realpath "${kaldi_dir}")"
model_dir="$(realpath "${model_dir}")"
dict_file="$(realpath "${dict_file}")"
lm_file="$(realpath "${lm_file}")"

steps_dir="${kaldi_dir}/egs/wsj/s5/steps"
utils_dir="${kaldi_dir}/egs/wsj/s5/utils"
bin_dir="${kaldi_dir}/src/bin"
lib_dir="${kaldi_dir}/src/lib"
fstbin_dir="${kaldi_dir}/src/fstbin"
lmbin_dir="${kaldi_dir}/src/lmbin"
openfst_dir="${kaldi_dir}/tools/openfst"

# Empty path.sh
touch "${model_dir}/path.sh"

# Link utils
ln -fs "${utils_dir}" "${model_dir}/utils"

export PATH="${utils_dir}:${fstbin_dir}:${lmbin_dir}:${bin_dir}:${openfst_dir}/bin:$PATH"
export LD_LIBRARY_PATH="${lib_dir}:${openfst_dir}/lib:${LD_LIBRARY_PATH}"

# Clean up
echo "Cleaning up"
rm -rf "${model_dir}/data"
rm -rf "${model_dir}/graph"

# Lexicon
echo "Generating lexicon"
mkdir -p "${model_dir}/data/local/dict"
cp "${model_dir}"/phones/*.txt "${model_dir}/data/local/dict/"
cp "${dict_file}" "${model_dir}/data/local/dict/lexicon.txt"
cd "${model_dir}" && \
    "${utils_dir}/prepare_lang.sh" \
        "${model_dir}/data/local/dict" '' \
        "${model_dir}/data/local/lang" "${model_dir}/data/lang"

# Language model
echo "Formatting language model"
cat "${lm_file}" | gzip --to-stdout > "${model_dir}/data/local/lang/lm.arpa.gz"
cd "${model_dir}" && \
    "${utils_dir}/format_lm.sh" \
        "${model_dir}/data/lang" "${model_dir}/data/local/lang/lm.arpa.gz" \
        "${model_dir}/data/local/dict/lexicon.txt" "${model_dir}/data/lang"

# Graph
echo "Creating graph"
cd "${model_dir}" && \
    "${utils_dir}/mkgraph.sh" \
        "${model_dir}/data/lang" \
        "${model_dir}/model" \
        "${model_dir}/graph"

if [[ "${model_type}" == "nnet3" ]]; then
    # Prepare online configuration
    echo "Preparing online decoding"
    online_dir="${model_dir}/online"
    cd "${model_dir}" && \
        "${steps_dir}/online/nnet3/prepare_online_decoding.sh" \
            --mfcc-config "${model_dir}/conf/mfcc_hires.conf" \
            "${model_dir}/data/lang" \
            "${model_dir}/extractor" \
            "${model_dir}/model" \
            "${online_dir}"
fi

echo "Training succeeded"
