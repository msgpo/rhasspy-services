#!/usr/bin/env bash
this_dir="$( cd "$( dirname "$0" )" && pwd )"

# -----------------------------------------------------------------------------
# Command-line Arguments
# -----------------------------------------------------------------------------

. "${this_dir}/etc/shflags"

DEFINE_string 'profile' '' 'Path to profile directory' 'p'

# MQTT
DEFINE_string 'mqtt-host' '127.0.0.1' 'MQTT server address'
DEFINE_integer 'mqtt-port' 1883 'MQTT server port'

# Events
DEFINE_string 'start-training' 'rhasspy/training/start-training' 'Topic for re-training request'
DEFINE_string 'training-failed' 'rhasspy/training/training-failed' 'Topic for training failure response'
DEFINE_string 'training-complete' 'rhasspy/training/training-complete' 'Topic for training completion response'

# training
DEFINE_boolean 'debug' false 'Print DEBUG messages to console'
DEFINE_string 'sentences-ini' '' 'Path to sentences.ini file'
DEFINE_string 'g2p-model' '' 'Path to OpenFST grapheme-to-phoneme model'
DEFINE_string 'intent-fst' '' 'Path to write intent finite state transducer'
DEFINE_string 'language-model' '' 'Path to write ARPA language model'
DEFINE_string 'dictionary' '' 'Path to write prune prounciation dictionary'
DEFINE_string 'base-dictionary' '' 'Path to base prounciation dictionary'
DEFINE_string 'grammar-dir' '' 'Path to write JSGF grammars'
DEFINE_string 'vocab' '' 'Path to sentence vocabulary'
DEFINE_string 'unknown' '' 'Path to write unknown words'
DEFINE_integer 'nbest' 5 'Number of pronunciation guesses for unknown words'

FLAGS "$@" || exit $?
eval set -- "${FLAGS_ARGV}"

# -----------------------------------------------------------------------------
# Default Settings
# -----------------------------------------------------------------------------

set -e

profile_dir="${FLAGS_profile}"

mqtt_host="${FLAGS_mqtt_host}"
mqtt_port="${FLAGS_mqtt_port}"

sentences_ini="${FLAGS_sentences_ini}"
g2p_model="${FLAGS_g2p_model}"
intent_fst="${FLAGS_intent_fst}"
language_model="${FLAGS_language_model}"
base_dictionary="${FLAGS_base_dictionary}"
dictionary="${FLAGS_dictionary}"
grammar_dir="${FLAGS_grammar_dir}"
vocab="${FLAGS_vocab}"
unknown="${FLAGS_unknown}"
nbest="${FLAGS_nbest}"

if [[ "${FLAGS_debug}" -eq "${FLAGS_TRUE}" ]]; then
    debug='--debug'
fi

start_training="${FLAGS_start_training}"
training_failed="${FLAGS_training_failed}"
training_complete="${FLAGS_training_complete}"

# -----------------------------------------------------------------------------
# Profile
# -----------------------------------------------------------------------------

if [[ ! -z "${profile_dir}" ]]; then
    export profile_dir

    # Load virtual environment
    venv="${this_dir}/.venv"
    if [[ -d "${venv}" ]]; then
        source "${venv}/bin/activate"
        export PATH="${venv}/bin:${PATH}"
        export LD_LIBRARY_PATH="${venv}/lib:${LD_LIBRARY_PATH}"
    fi

    source <(python3 \
                 "${this_dir}/bin/yq" "${profile_dir}/profile.yml" \
                 -q mqtt_host 'mqtt.host' "${mqtt_host}" \
                 -q mqtt_port 'mqtt.port' "${mqtt_port}" \
                 -q sentences_ini 'training.sentences-file' "${sentences_ini}" \
                 -q g2p_model 'training.grapheme-to-phoneme-model' "${g2p_model}" \
                 -q intent_fst 'training.intent-fst' "${intent_fst}" \
                 -q language_model 'training.language-model' "${language_model}" \
                 -q dictionary 'training.dictionary' "${dictionary}" \
                 -q base_dictionary 'training.base-dictionary' "${base_dictionary}" \
                 -q grammar_dir 'training.grammar-directory' "${grammar_dir}" \
                 -q vocab 'training.vocabulary-file' "${vocab}" \
                 -q unknown 'training.unknown-words-file' "${unknown}" \
                 -q start_training 'training.mqtt-events.start-training' "${start_training}" \
                 -q training_failed 'training.mqtt-events.training-failed' "${training_failed}" \
                 -q training_complete 'training.mqtt-events.training-complete' "${training_complete}" | \
            tee /dev/stderr)
fi

# -----------------------------------------------------------------------------

# Temporary directory
temp_dir="$(mktemp -d)"
function finish {
    rm -rf "${temp_dir}"
}

trap finish EXIT

# -----------------------------------------------------------------------------
# Required Settings
# -----------------------------------------------------------------------------

if [[ -z "${sentences_ini}" ]]; then
    echo "Sentences ini file is required"
    exit 1
fi

if [[ -z "${intent_fst}" ]]; then
    echo "Intent FST path is required"
    exit 1
fi

# -----------------------------------------------------------------------------

if [[ -z "${grammar_dir}" ]]; then
    grammar_dir="${temp_dir}/grammars"
fi

if [[ -z "${vocab}" ]]; then
    vocab="${temp_dir}/vocab.txt"
fi

if [[ -z "${unknown}" ]]; then
    unknown="${temp_dir}/unknown.txt"
fi

# -----------------------------------------------------------------------------

export PATH="${this_dir}/bin:${PATH}"

mosquitto_sub -v -t "${start_training}" | while read -r line;
do
    echo "Training started"

    # ini -> jsgf
    "${this_dir}/ini_jsgf/ini_jsgf-cli" \
           --grammar-dir "${grammar_dir}" \
           < "${sentences_ini}"

    # jsgf -> fst, arpa
    "${this_dir}/jsgf_fst_arpa/jsgf_fst_arpa-cli" \
           --grammar-dir "${grammar_dir}" \
           --fst "${intent_fst}" \
           --arpa "${language_model}" \
           --vocab "${vocab}"

    # vocab -> dict
    rm -f "${unknown}"
    "${this_dir}/vocab_dict/vocab_dict-cli" \
           --vocab "${vocab}" \
           --dictionary "${base_dictionary}" \
           --unknown "${unknown}" \
           > "${dictionary}"

    if [[ ! -f "${unknown}" ]]; then
        echo "Training complete"
        mosquitto_pub -t "${training_complete}" -m '{}'
    else
        echo "Unknown words:"
        cat "${unknown}"
        echo ''

        failed_message='{}'

        if [[ ! -z "${g2p_model}" ]]; then
            guess="${temp_dir}/guess.json"

            # Guess unknown words
            echo "Guessing unknown word pronunciations with ${g2p_model}"

            echo '{ "unknown_words": [' > "${guess}"
            "${this_dir}/vocab_g2p/vocab_g2p-cli" \
                --model "${g2p_model}" \
                --nbest "${nbest}" \
                < "${unknown}" >> "${guess}"
            echo ']}' >> "${guess}"

            failed_message="$(jsonl . < "${guess}")"
            echo 'Done guessing'
        fi

        mosquitto_pub -t "${training_failed}" -m "${failed_message}"
    fi
done
