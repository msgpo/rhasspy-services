#!/usr/bin/env bash

if [[ -z "${rhasspy_dir}" ]]; then
    export rhasspy_dir='/usr/lib/rhasspy'
fi

# -----------------------------------------------------------------------------
# Command-line Arguments
# -----------------------------------------------------------------------------

. "${rhasspy_dir}/etc/shflags"

# fstrtext
DEFINE_string 'intent-fst' '' 'Path to intent finite state transducer'
DEFINE_string 'slot-fst' '' 'Path to write slot acceptor'
DEFINE_string 'model-path' '' 'Path to write fasttext model'
DEFINE_string 'sentences-path' '' 'Path to write sampled sentences'
DEFINE_integer 'samples' -1 'Number of samples to generate and train on'

FLAGS "$@" || exit $?
eval set -- "${FLAGS_ARGV}"

# -----------------------------------------------------------------------------
# Default Settings
# -----------------------------------------------------------------------------

set -e

intent_fst="${FLAGS_intent_fst}"
slot_fst="${FLAGS_slot_fst}"
model_path="${FLAGS_model_path}"
sentences_path="${FLAGS_sentences_path}"
samples="${FLAGS_samples}"

# -----------------------------------------------------------------------------
# Required Settings
# -----------------------------------------------------------------------------

if [[ -z "${intent_fst}" ]]; then
    echo '--intent-fst is required'
    exit 1
fi

if [[ -z "${slot_fst}" ]]; then
    echo '--slot-fst is required'
    exit 1
fi

if [[ -z "${model_path}" ]]; then
    echo '--model-path is required'
    exit 1
fi

# -----------------------------------------------------------------------------

set -e

echo 'Creating slot acceptor'

# Create slot acceptor
python3 -m intent_recognition.fstrtext.fstrtext_train \
        --intent-fst "${intent_fst}" \
        --slot-fst "${slot_fst}"

echo "Wrote slot FST to ${slot_fst}"

if [[ "${samples}" == '-1' ]]; then
    # Expecting sentences as input
    if [[ -z "${sentences_path}" ]];
    then
       sentences_path='/dev/stdin'
    fi
else
    # Sampling sentences
    if [[ -z "${sentences_path}" ]]; then
        # Use temp file
        sentences_path="$(mktemp)"
        function cleanup {
            rm -f "${text_path}"
        }

        trap cleanup EXIT
    fi

    rhasspy-sample-sentences \
        --intent-fst "${intent_fst}" \
        --samples "${samples}" \
        --meta | \
        sed -e 's/__begin__[^ ]\+ //g' | \
        sed -e 's/ __end__[^ ]\+//g' \
            > "${sentences_path}"

    echo "Wrote sample sentences to ${sentences_path}"
fi

# -----------------------------------------------------------------------------

# Train classifier
echo "Training fasttext model from sentences in ${sentences_path}"
fasttext \
    supervised \
    -input "${sentences_path}" \
    -output "${model_path}"

echo "Wrote fasttext model to ${model_path}"
